import glob
import os

import numpy as np
from torch.utils.data import Dataset
from PIL import Image


class TeacherGeneratedDataset(Dataset):
    def __init__(self, root, transform=None):
        """
        Construct a dataset composed of latent noise inputs and outputs generated by a large teacher model (generator).
        :param transform: Transforms pipeline to apply to each sample.
        """
        self.transform = transform
        path_latent = os.path.join(root, "inputs")
        path_generated = os.path.join(root, "targets")
        self.files_latent = sorted(glob.glob(path_latent + "/*.npy"))  # latent vectors in .npy format
        self.files_generated = sorted(glob.glob(path_generated + "/*.png"))  # generated images in .png format

        print("files_latent:", len(self.files_latent))
        print("files_generated:", len(self.files_generated))

        assert len(self.files_latent) == len(self.files_generated), "Mismatch between number of latent and generated"

    def __getitem__(self, index):
        latent = np.load(self.files_latent[index % len(self.files_latent)])  # circular indexing
        generated = Image.open(self.files_generated[index % len(self.files_generated)])

        if self.transform is not None:
            generated = self.transform(generated)

        return {"input": latent, "target": generated}

    def __len__(self):
        return len(self.files_latent)
